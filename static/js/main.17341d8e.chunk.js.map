{"version":3,"sources":["components/number.js","components/game.js","App.js","serviceWorker.js","index.js"],"names":["Number","handleClick","_this","props","clickable","onClick","id","react_default","a","createElement","className","style","opacity","this","value","Component","_","require","randomNumberBetween","min","max","Math","floor","random","Game","state","gameStatus","remainingSeconds","initialSeconds","selectedIds","challengeNumbers","Array","from","length","challengeSize","map","apply","Object","toConsumableArray","challengeRange","target","sampleSize","reduce","acc","curr","startGame","setState","intervalId","setInterval","prevState","newRemainingSeconds","clearInterval","isNumberAvailable","numberIndex","indexOf","selectNumber","concat","calcGameStatus","sumSelected","autoPlay","_this2","_this$state","backgroundColor","bgColors","index","number","key","includes","onPlayAgain","playing","won","lost","App","gameId","resetGame","game","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.17341d8e.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './CSS/style.css';\r\n\r\nclass Number extends Component {\r\n    handleClick = () => {\r\n        if (this.props.clickable) {\r\n            this.props.onClick(this.props.id);\r\n        }\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div\r\n                className=\"number\"\r\n                style={{ opacity: this.props.clickable ? 1 : 0.3 }}\r\n                onClick={this.handleClick}\r\n            >\r\n                {this.props.value}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Number;","/* global _ */\r\nimport React, { Component } from 'react';\r\nimport Number from './number';\r\nimport './CSS/style.css';\r\n\r\nvar _ = require('lodash');\r\nconst randomNumberBetween = (min, max) =>\r\n    Math.floor(Math.random() * (max - min + 1)) + min;\r\n\r\nclass Game extends Component {\r\n\r\n    state = {\r\n        gameStatus: 'new',\r\n        remainingSeconds: this.props.initialSeconds,\r\n        selectedIds: [],\r\n    };\r\n\r\n    static bgColors = {\r\n        playing: '#ccc',\r\n        won: 'green',\r\n        lost: 'red',\r\n    };\r\n\r\n    challengeNumbers = Array\r\n        .from({ length: this.props.challengeSize })\r\n        .map(() => randomNumberBetween(...this.props.challengeRange));\r\n\r\n\r\n    target = _.sampleSize(\r\n        this.challengeNumbers,\r\n        this.props.challengeSize - 2\r\n    ).reduce((acc, curr) => acc + curr, 0);\r\n\r\n    componentDidMount() {\r\n        if (this.props.autoPlay) {\r\n            this.startGame();\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.intervalId);\r\n    }\r\n\r\n    startGame = () => {\r\n        this.setState({ gameStatus: 'playing' }, () => {\r\n            this.intervalId = setInterval(() => {\r\n                this.setState((prevState) => {\r\n                    const newRemainingSeconds = prevState.remainingSeconds - 1;\r\n                    if (newRemainingSeconds === 0) {\r\n                        clearInterval(this.intervalId);\r\n                        return { gameStatus: 'lost', remainingSeconds: 0 };\r\n                    }\r\n                    return { remainingSeconds: newRemainingSeconds };\r\n                });\r\n            }, 1000);\r\n        });\r\n    };\r\n\r\n    isNumberAvailable = (numberIndex) =>\r\n        this.state.selectedIds.indexOf(numberIndex) === -1;\r\n\r\n    selectNumber = (numberIndex) => {\r\n        if (this.state.gameStatus !== 'playing') {\r\n            return;\r\n        }\r\n        this.setState(\r\n            (prevState) => ({\r\n                selectedIds: [...prevState.selectedIds, numberIndex],\r\n                gameStatus: this.calcGameStatus([\r\n                    ...prevState.selectedIds,\r\n                    numberIndex,\r\n                ]),\r\n            }),\r\n            () => {\r\n                if (this.state.gameStatus !== 'playing') {\r\n                    clearInterval(this.intervalId);\r\n                }\r\n            }\r\n        );\r\n    };\r\n\r\n    calcGameStatus = (selectedIds) => {\r\n        const sumSelected = selectedIds.reduce(\r\n            (acc, curr) => acc + this.challengeNumbers[curr],\r\n            0\r\n        );\r\n        if (sumSelected < this.target) {\r\n            return 'playing';\r\n        }\r\n        return sumSelected === this.target ? 'won' : 'lost';\r\n    };\r\n\r\n    render() {\r\n        const { gameStatus, remainingSeconds } = this.state;\r\n        return (\r\n            <div className=\"game\">\r\n                <div\r\n                    className=\"target\"\r\n                    style={{ backgroundColor: Game.bgColors[gameStatus] }}\r\n                >\r\n                    {gameStatus === 'new' ? '?' : this.target}\r\n                </div>\r\n                <div className=\"challenge-numbers\">\r\n                    {this.challengeNumbers.map((value, index) => (\r\n                        <Number\r\n                            key={index}\r\n                            id={index}\r\n                            value={gameStatus === 'new' ? '?' : value}\r\n                            clickable={this.isNumberAvailable(index)}\r\n                            onClick={this.selectNumber}\r\n                        />\r\n                    ))}\r\n                </div>\r\n                <div className=\"footer\">\r\n                    {gameStatus === 'new' ? (\r\n                        <button onClick={this.startGame}>Start</button>\r\n                    ) : (\r\n                            <div className=\"timer-value\">{remainingSeconds}</div>\r\n                        )}\r\n                    {['won', 'lost'].includes(gameStatus) && (\r\n                        <button onClick={this.props.onPlayAgain}>Play Again</button>\r\n                    )}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Game;","import React, { Component } from 'react';\nimport Game from './components/game';\nimport './App.css';\n\nclass App extends Component {\n\n  state = {\n    gameId: 1,\n  };\n\n  resetGame = () =>\n    this.setState((prevState) => ({\n      gameId: prevState.gameId + 1,\n    }));\n\n  render() {\n    return (\n      <Game\n        key={this.state.gameId}\n        autoPlay={this.state.gameId > 1}\n        challengeSize={6}\n        challengeRange={[2, 9]}\n        initialSeconds={15}\n        onPlayAgain={this.resetGame}\n      />\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}